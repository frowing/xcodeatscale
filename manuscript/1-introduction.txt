# Introduction

Nowadays, most Xcode projects that we start, we kick them off with a single target that contains all the source code of our application. Your next startup big project, your free time pet project, your company's mobile application. We start by building something simple, self-contained that allows us validate the idea and keep iterating and growing.

The first days, weeks and months working on these projects are a pleasure, adding more engineers speed up development, issues are quickly tackled and the project seems to evolve according to the business needs. Along the way you take a lot of decisions, like using reactive and which library for that, or if Core Data is the storage you want go with... Some of these decisions might not seem very important when they are made but the reality is that they might end up being. Decisions are taken based on multiple variables, product needs, team motivation, technical limitations... and that's not an easy task. Moreover, these variables might change from one week to another, and you should be able to identify them and make decisions to allow your project and team scale well.

How many times have you heard the expression *"this doesn't scale well"*? Ensuring scalability in your projects is very important to be able to quickly respond to new product requests and keep your team's motivation on. You don't want the people in your team to quit because working in the project is a nightmare and they can't respond to the product needs. This is a very common scenario in startups nowadays, whose focus is shipping something quick to validate their ideas and iterate as fast as possible. That leads them to ignore the importance of good and scalable code and end up struggling to solve the unsolvable puzzle the messy project code is. 

Ensuring a good scalability is not easy and requires a lot of attention. It's an iterative process and the engineers in your team should be able to address the problems when at the optimal moment. Addressing them early might lead to overengineering while addressing them too late might lead to an unmanageable codebase. Scalability also requires experience. Not only experience as engineer but with the language, the frameworks and the tools that you are using. Some frameworks may scale well when used with small teams but not that well when used in large teams. Some tools may scale better depending on how you use them. Unfortunately, to learn these things you need experience working in such environments. You need to fight against these issues to learn from them and be able to address these issues better and earlier for the next time.

Working at SoundCloud has been a challenge in terms of scalability. A fast-growing team and project led us to rethink our architecture, frameworks and tools. We moved from a few developers to around 30 of them. We got to a point where adding more developers didn't help with the performance and developers spent most of their time struggling with the project than actually coding. **We had a big scalability issue that we had to address.** The team sat down to evaluate the issue we were having with scalability and proposed solutions that improved the performance of the teams ,and that allowed the company deliver features faster, having a huge impact in the market. It was very challenging... wasn't it? 

Along the way we've learnt more about Core Data, XIBs, `.xcodeproj` files... We thought we knew about these tools but we only did in the context of small projects. When you use them in a big project or team there are some places where you have to pay special attention. To mention some examples:

- Different teams modifying a shared data model and having to solve conflicts on Git.
- Huge targets that take minutes to compile.
- Duplication XIBs because a reusability issue.

These are just examples of issues that we'll address in this book. **Xcode at scale** will go through common components in the development of apps using Swift, but going one step further and presenting the scalability issues these elements might have and providing tips and alternatives to prevent scalability before they happen in your project. It'll help you identify them before it's too late!

## What will you learn in your book?

In this book you'll learn how to identify scalability issues and how to design and develop your apps to make them scalable. We'll cover different areas of development, ranging from UI to persistence and including topics like continuous integration, testing... These are some examples of topics that we'll cover in the book:

- How to design your UI to prevent constant conflicts.
- How to avoid performance issues with Core Data when using a shared data model.
- How a few changes in your CI pipeline can boost your team's performance.
- How the modularization of your app can make your teams completely atomic and make them think about APIs.

Every section starts with a context that introduces the scalability issue that might arise. With the context in place, the section will dive into solutions, alternatives and tips to prevent it. Some might require you change your mindset, and do the things in a different way. The book doesn't introduce any new concept that you didn't know in advance, but explains you how to use them differently to scale better than what they used to do.

## How to use this book

Although each chapter covers a different area, I recommend you that you read them sequentially, because some chapters might include some references to the previous chapters. Once you have read the book and have a big picture of the book, you can use it as a reference and dive into the chapter that you are interested in.


## Who is this book for?

This book is for applications developers that work with Swift & Xcode and want to level up in the area of scalability. In case you are not very familiar with Swift yet:

- If you have no experience with Swift I recommend you [this book](https://developer.apple.com/swift/resources/) from Apple. It'll guide you through the basics of the language.
- If you have experience in Swift but want to learn the advanced side of the language, I recommend you the book from [objc.io](https://www.objc.io/), [Advanced Swift](https://www.objc.io/books/advanced-swift/).

If you are struggling to scale your team or project, or you are starting a new project that might grow very quickly this book is for you. I'll teach you how to stop struggling, or how to prevent it.

## Versioning

Thanks to [LeanPub](https://leanpub.com/) and [Markua](http://markua.com/), an improved version of Markdown to write documentation and books, I can work on this book like if I was working on a software project. I have things like:

- Creating *commits* with new changes.
- Creating *branches* to work on new chapters.
- Creating versions and publish *releases* on GitHub.
- Proposing changes by using *pull requests*.

Yes, although it sounds like a software project it's actually a book. Thanks to versioning, you'll be able to see the changes that I've been introducing. Moreover, you'll be able to download a specific version. Whenever a new version gets published, you'll get a notification from Leanpub with the new version to download, so don't forget to enable your email notifications, because with a such an active language, I'll most likely publish versions quite often.

## Support

This book is not perfect and I'm sure that you'll find some mistake. If you'd like to ask something related to the book you can use any of the following channels:

- You can create an issue directly on the [GitHub repository](https://github.com/pepibumur/swiftatscale).
- Send me an email: [pepibumur@gmail.com](mailto://pepibumur@gmail.com).
